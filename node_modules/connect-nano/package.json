{
  "name": "connect-nano",
  "description": "Provide req.nano, passing session cookies to CouchDB and back again.",
  "version": "0.1.3",
  "homepage": "https://github.com/jo/connect-nano",
  "author": {
    "name": "Johannes J. Schmidt",
    "email": "schmidt@netzmerk.com",
    "url": "http://die-tf.de"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jo/connect-nano.git"
  },
  "bugs": {
    "url": "https://github.com/jo/connect-nano/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jo/connect-nano/blob/master/LICENSE-MIT"
    }
  ],
  "main": "index.js",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "nodeunit test/*_test.js && rm -f tmp",
    "jshint": "jshint -c .jshintrc index.js test/*.js"
  },
  "devDependencies": {
    "request": "~2.21.0",
    "connect": "~2.7.11",
    "nock": "~0.18.2",
    "nodeunit": "~0.8.4",
    "jshint": "~2.4.3"
  },
  "keywords": [
    "web",
    "connect",
    "middleware",
    "couchdb",
    "nano"
  ],
  "dependencies": {
    "nano": "~4.4.0"
  },
  "readme": "# connect-nano [![Build Status](https://secure.travis-ci.org/jo/connect-nano.png?branch=master)](http://travis-ci.org/jo/connect-nano)\n\nProvide [`req.nano`](https://github.com/dscape/nano), passing session cookies to CouchDB and back again.\n\n## Getting Started\nInstall the module with: `npm install connect-nano`\n\n```javascript\nvar connect = require('connect');\nvar nano = require('connect-nano');\n\nvar app = connect()\n  .use(connect.cookieParser())  // connect-nano depends on cookieParser\n  .use(nano('http://localhost:5984'))\n  .use('/login', function(req, res) {\n    req.pipe(req.nano.request({\n      method: 'post',\n      path: '_session',\n      content_type: 'application/x-www-form-urlencoded; charset=utf-8'\n    })).pipe(res);\n  })\n  .use('/session', function(req, res) {\n    req.nano.request({ path: '_session' }).pipe(res);\n  })\n  .use('/me', function(req, res) {\n    req.nano.request({ path: '_session' }, function(err, data) {\n      if (err) {\n        return res.end(err);\n      }\n      req.nano.use('_users').get('org.couchdb.user:' + data.userCtx.name).pipe(res);\n    });\n  })\n  .listen(3000);\n```\n\n## Options\nconnect-nano passes configuration directly over to `nano()`,\nsee [nano configuration](https://github.com/dscape/nano#configuration).\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\nAdd unit tests for any new or changed functionality.\n\n* Lint your code via `npm run jshint`.\n    * And test your code with [nodeunit](https://github.com/caolan/nodeunit) via `npm test`.\n\n## License\nCopyright (c) 2013 null2 GmbH, Johannes J. Schmidt  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "connect-nano@0.1.3",
  "_shasum": "2433c337ac254d1ef82ab310413b0c214ccb75ee",
  "_from": "connect-nano@",
  "_resolved": "https://registry.npmjs.org/connect-nano/-/connect-nano-0.1.3.tgz"
}
